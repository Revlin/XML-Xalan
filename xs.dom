MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::Notation
PROTOTYPES: DISABLE

char*
getSystemId(self)
    XalanNotation *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getSystemId();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


char*
getPublicId(self)
    XalanNotation *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getPublicId();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::EntityReference
PROTOTYPES: DISABLE

MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::CDATASection
PROTOTYPES: DISABLE

MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::DocumentFragment
PROTOTYPES: DISABLE

MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::Comment
PROTOTYPES: DISABLE

MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::Attr
PROTOTYPES: DISABLE

char*
getName(self)
    XalanAttr *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getName();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


void
setValue(self, value)
    XalanAttr *self
    char* value
    CODE:
    try {
        self->setValue(XalanDOMString(value));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


XalanElement*
getOwnerElement(self)
    XalanAttr *self
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Element";
    CODE:
    try {
        RETVAL = self->getOwnerElement();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    if (!RETVAL)
        XSRETURN_UNDEF;
    OUTPUT:
    RETVAL  

char*
getValue(self)
    XalanAttr *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getValue();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::Entity
PROTOTYPES: DISABLE

char*
getSystemId(self)
    XalanEntity *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getSystemId();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


char*
getPublicId(self)
    XalanEntity *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getPublicId();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


char*
getNotationName(self)
    XalanEntity *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getNotationName();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::Document
PROTOTYPES: DISABLE

XalanEntityReference*
createEntityReference(self, name)
    XalanDocument *self
    char* name
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::EntityReference";
    CODE:
    try {
        RETVAL = self->createEntityReference(XalanDOMString(name));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanNode*
importNode(self, importedNode, deep)
    XalanDocument *self
    XalanNode* importedNode
    bool deep
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Node";
    CODE:
    try {
        RETVAL = self->importNode(importedNode, deep);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanCDATASection*
createCDATASection(self, data)
    XalanDocument *self
    char* data
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::CDATASection";
    CODE:
    try {
        RETVAL = self->createCDATASection(XalanDOMString(data));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanDOMImplementation*
getImplementation(self)
    XalanDocument *self
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::DOMImplementation";
    CODE:
    try {
        RETVAL = self->getImplementation();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanDocumentFragment*
createDocumentFragment(self)
    XalanDocument *self
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::DocumentFragment";
    CODE:
    try {
        RETVAL = self->createDocumentFragment();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanComment*
createComment(self, data)
    XalanDocument *self
    char* data
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Comment";
    CODE:
    try {
        RETVAL = self->createComment(XalanDOMString(data));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanAttr*
createAttribute(self, name)
    XalanDocument *self
    char* name
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Attr";
    CODE:
    try {
        RETVAL = self->createAttribute(XalanDOMString(name));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


unsigned long
XalanDocument::getNumber()


XalanAttr*
createAttributeNS(self, namespaceURI, qname)
    XalanDocument *self
    char* namespaceURI
    char* qname
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Attr";
    CODE:
    try {
        RETVAL = self->createAttributeNS(XalanDOMString(namespaceURI), XalanDOMString(qname));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanElement*
getDocumentElement(self)
    XalanDocument *self
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Element";
    CODE:
    try {
        RETVAL = self->getDocumentElement();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanElement*
getElementById(self, elementId)
    XalanDocument *self
    char* elementId
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Element";
    CODE:
    try {
        RETVAL = self->getElementById(XalanDOMString(elementId));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanProcessingInstruction*
createProcessingInstruction(self, target, data)
    XalanDocument *self
    char* target
    char* data
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::ProcessingInstruction";
    CODE:
    try {
        RETVAL = self->createProcessingInstruction(XalanDOMString(target), XalanDOMString(data));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanNodeList*
getElementsByTagName(self, tagname)
    XalanDocument *self
    char* tagname
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::NodeList";
    CODE:
    try {
        RETVAL = self->getElementsByTagName(XalanDOMString(tagname));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanNodeList*
getElementsByTagNameNS(self, namespaceURI, localname)
    XalanDocument *self
    char* namespaceURI
    char* localname
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::NodeList";
    CODE:
    try {
        RETVAL = self->getElementsByTagNameNS(XalanDOMString(namespaceURI), XalanDOMString(localname));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanDocumentType*
getDoctype(self)
    XalanDocument *self
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::DocumentType";
    CODE:
    try {
        RETVAL = self->getDoctype();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanElement*
createElement(self, tagname)
    XalanDocument *self
    char* tagname
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Element";
    CODE:
    try {
        RETVAL = self->createElement(XalanDOMString(tagname));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanText*
createTextNode(self, data)
    XalanDocument *self
    char* data
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Text";
    CODE:
    try {
        RETVAL = self->createTextNode(XalanDOMString(data));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanElement*
createElementNS(self, namespaceURI, qname)
    XalanDocument *self
    char* namespaceURI
    char* qname
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Element";
    CODE:
    try {
        RETVAL = self->createElementNS(XalanDOMString(namespaceURI), XalanDOMString(qname));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::ProcessingInstruction
PROTOTYPES: DISABLE

char*
getData(self)
    XalanProcessingInstruction *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getData();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


void
setData(self, data)
    XalanProcessingInstruction *self
    char* data
    CODE:
    try {
        self->setData(XalanDOMString(data));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


char*
getTarget(self)
    XalanProcessingInstruction *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getTarget();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::DocumentType
PROTOTYPES: DISABLE

char*
getName(self)
    XalanDocumentType *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getName();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


char*
getSystemId(self)
    XalanDocumentType *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getSystemId();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


char*
getInternalSubset(self)
    XalanDocumentType *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getInternalSubset();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


char*
getPublicId(self)
    XalanDocumentType *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getPublicId();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


const XalanNamedNodeMap*
getEntities(self)
    XalanDocumentType *self
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::NamedNodeMap";
    CODE:
    try {
        RETVAL = self->getEntities();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

const XalanNamedNodeMap*
getNotations(self)
    XalanDocumentType *self
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::NamedNodeMap";
    CODE:
    try {
        RETVAL = self->getNotations();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::NodeList
PROTOTYPES: DISABLE

unsigned int
XalanNodeList::getLength()


XalanNode*
item(self, index)
    XalanNodeList *self
    unsigned int index
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Node";
    CODE:
    try {
        RETVAL = self->item(index);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::Text
PROTOTYPES: DISABLE

XalanText*
splitText(self, offset)
    XalanText *self
    unsigned int offset
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Text";
    CODE:
    try {
        RETVAL = self->splitText(offset);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::Node
PROTOTYPES: DISABLE

XalanNode*
replaceChild(self,  newChild, oldChild)
    XalanNode *self
    XalanNode* newChild
    XalanNode* oldChild
    CODE:
    try {
        RETVAL = self->replaceChild(newChild, oldChild);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    if (!RETVAL) 
        XSRETURN_UNDEF;
    ST(0) = sv_newmortal();
    BLESS_CORRECT_NODE_CLASS(ST(0), RETVAL)


char*
getNodeValue(self)
    XalanNode *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getNodeValue();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


XalanNode*
getPreviousSibling(self)
    XalanNode *self
    CODE:
    try {
        RETVAL = self->getPreviousSibling();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    if (!RETVAL) 
        XSRETURN_UNDEF;
    ST(0) = sv_newmortal();
    BLESS_CORRECT_NODE_CLASS(ST(0), RETVAL)


const XalanNamedNodeMap*
getAttributes(self)
    XalanNode *self
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::NamedNodeMap";
    CODE:
    try {
        RETVAL = self->getAttributes();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanNode*
getNextSibling(self)
    XalanNode *self
    CODE:
    try {
        RETVAL = self->getNextSibling();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    if (!RETVAL) 
        XSRETURN_UNDEF;
    ST(0) = sv_newmortal();
    BLESS_CORRECT_NODE_CLASS(ST(0), RETVAL)


char*
getNodeName(self)
    XalanNode *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getNodeName();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


XalanNode*
insertBefore(self,  newChild, refChild)
    XalanNode *self
    XalanNode* newChild
    XalanNode* refChild
    CODE:
    try {
        RETVAL = self->insertBefore(newChild, refChild);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    if (!RETVAL) 
        XSRETURN_UNDEF;
    ST(0) = sv_newmortal();
    BLESS_CORRECT_NODE_CLASS(ST(0), RETVAL)


int
getNodeType(self)
    XalanNode *self
    CODE:
    try {
        RETVAL = self->getNodeType();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanDocument*
getOwnerDocument(self)
    XalanNode *self
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Document";
    CODE:
    try {
        RETVAL = self->getOwnerDocument();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    if (!RETVAL) 
        XSRETURN_UNDEF;
    OUTPUT:
    RETVAL

char*
getLocalName(self)
    XalanNode *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getLocalName();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


XalanNode*
getFirstChild(self)
    XalanNode *self
    CODE:
    try {
        RETVAL = self->getFirstChild();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    if (!RETVAL) 
        XSRETURN_UNDEF;
    ST(0) = sv_newmortal();
    BLESS_CORRECT_NODE_CLASS(ST(0), RETVAL)


char*
getPrefix(self)
    XalanNode *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getPrefix();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    DOMSTRING_2CHAR(RETVAL, self->getPrefix());
    OUTPUT:
    RETVAL


void
setNodeValue(self, nodeValue)
    XalanNode *self
    char* nodeValue
    CODE:
    try {
        self->setNodeValue(XalanDOMString(nodeValue));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


bool
supports(self, feature, version)
    XalanNode *self
    char* feature
    char* version
    CODE:
    try {
        RETVAL = self->supports(XalanDOMString(feature), XalanDOMString(version));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


void
normalize(self)
    XalanNode *self
    CODE:
    try {
        self->normalize();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


XalanNode*
removeChild(self,  oldChild)
    XalanNode *self
    XalanNode* oldChild
    CODE:
    try {
        RETVAL = self->removeChild(oldChild);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    if (!RETVAL) 
        XSRETURN_UNDEF;
    ST(0) = sv_newmortal();
    BLESS_CORRECT_NODE_CLASS(ST(0), RETVAL)


XalanNode*
cloneNode(self,  deep)
    XalanNode *self
    bool deep
    CODE:
    try {
        RETVAL = self->cloneNode(deep);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    if (!RETVAL) 
        XSRETURN_UNDEF;
    ST(0) = sv_newmortal();
    BLESS_CORRECT_NODE_CLASS(ST(0), RETVAL)


unsigned long
getIndex(self)
    XalanNode *self
    CODE:
    try {
        RETVAL = self->getIndex();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanNode*
getLastChild(self)
    XalanNode *self
    CODE:
    try {
        RETVAL = self->getLastChild();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    if (!RETVAL) 
        XSRETURN_UNDEF;
    ST(0) = sv_newmortal();
    BLESS_CORRECT_NODE_CLASS(ST(0), RETVAL)


void
setPrefix(self, prefix)
    XalanNode *self
    char* prefix
    CODE:
    try {
        self->setPrefix(XalanDOMString(prefix));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


XalanNode*
appendChild(self,  newChild)
    XalanNode *self
    XalanNode* newChild
    CODE:
    try {
        RETVAL = self->appendChild(newChild);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    if (!RETVAL) 
        XSRETURN_UNDEF;
    ST(0) = sv_newmortal();
    BLESS_CORRECT_NODE_CLASS(ST(0), RETVAL)


bool
isIndexed(self)
    XalanNode *self
    CODE:
    try {
        RETVAL = self->isIndexed();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


char*
getNamespaceURI(self)
    XalanNode *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getNamespaceURI();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


const XalanNodeList*
getChildNodes(self)
    XalanNode *self
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::NodeList";
    CODE:
    try {
        RETVAL = self->getChildNodes();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::DOMImplementation
PROTOTYPES: DISABLE

bool
hasFeature(self, feature, version)
    XalanDOMImplementation *self
    char* feature
    char* version
    CODE:
    try {
        RETVAL = self->hasFeature(XalanDOMString(feature), XalanDOMString(version));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanDocumentType*
createDocumentType(self, qname, publicId, systemId)
    XalanDOMImplementation *self
    char* qname
    char* publicId
    char* systemId
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::DocumentType";
    CODE:
    try {
        RETVAL = self->createDocumentType(XalanDOMString(qname), XalanDOMString(publicId), XalanDOMString(systemId));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::CharacterData
PROTOTYPES: DISABLE

void
appendData(self, arg)
    XalanCharacterData *self
    char* arg
    CODE:
    try {
        self->appendData(XalanDOMString(arg));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


unsigned int
getLength(self)
    XalanCharacterData *self
    CODE:
    try {
        RETVAL = self->getLength();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

char*
getData(self)
    XalanCharacterData *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getData();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


char*
substringData(self, offset, count)
    XalanCharacterData *self
    unsigned int offset
    unsigned int count
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->substringData(offset, count);
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


void
deleteData(self, offset, count)
    XalanCharacterData *self
    unsigned int offset
    unsigned int count
    CODE:
    try {
        self->deleteData(offset, count);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


void
replaceData(self, offset, count, arg)
    XalanCharacterData *self
    unsigned int offset
    unsigned int count
    char* arg
    CODE:
    try {
        self->replaceData(offset, count, XalanDOMString(arg));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


void
insertData(self, offset, arg)
    XalanCharacterData *self
    unsigned int offset
    char* arg
    CODE:
    try {
        self->insertData(offset, XalanDOMString(arg));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::NamedNodeMap
PROTOTYPES: DISABLE

XalanNode*
setNamedItem(self, arg)
    XalanNamedNodeMap *self
    XalanNode* arg
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Node";
    CODE:
    try {
        RETVAL = self->setNamedItem(arg);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanNode*
setNamedItemNS(self, arg)
    XalanNamedNodeMap *self
    XalanNode* arg
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Node";
    CODE:
    try {
        RETVAL = self->setNamedItemNS(arg);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanNode*
removeNamedItem(self, name)
    XalanNamedNodeMap *self
    char* name
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Node";
    CODE:
    try {
        RETVAL = self->removeNamedItem(XalanDOMString(name));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


unsigned int
getLength(self)
    XalanNamedNodeMap *self
    CODE:
    try {
        RETVAL = self->getLength();
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanNode*
removeNamedItemNS(self, namespaceURI, localname)
    XalanNamedNodeMap *self
    char* namespaceURI
    char* localname
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Node";
    CODE:
    try {
        RETVAL = self->removeNamedItemNS(XalanDOMString(namespaceURI), XalanDOMString(localname));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanNode*
getNamedItem(self, name)
    XalanNamedNodeMap *self
    char* name
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Node";
    CODE:
    try {
        RETVAL = self->getNamedItem(XalanDOMString(name));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanNode*
getNamedItemNS(self, namespaceURI, localname)
    XalanNamedNodeMap *self
    char* namespaceURI
    char* localname
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Node";
    CODE:
    try {
        RETVAL = self->getNamedItemNS(XalanDOMString(namespaceURI), XalanDOMString(localname));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanNode*
item(self, index)
    XalanNamedNodeMap *self
    unsigned int index
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Node";
    CODE:
    try {
        RETVAL = self->item(index);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::Element
PROTOTYPES: DISABLE

void
setAttribute(self, name, value)
    XalanElement *self
    char* name
    char* value
    CODE:
    try {
        self->setAttribute(XalanDOMString(name), XalanDOMString(value));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


void
setAttributeNS(self, namespaceURI, qname, value)
    XalanElement *self
    char* namespaceURI
    char* qname
    char* value
    CODE:
    try {
        self->setAttributeNS(XalanDOMString(namespaceURI), XalanDOMString(qname), XalanDOMString(value));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


void
removeAttribute(self, name)
    XalanElement *self
    char* name
    CODE:
    try {
        self->removeAttribute(XalanDOMString(name));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


void
removeAttributeNS(self, namespaceURI, localname)
    XalanElement *self
    char* namespaceURI
    char* localname
    CODE:
    try {
        self->removeAttributeNS(XalanDOMString(namespaceURI), XalanDOMString(localname));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }


char*
getAttribute(self, name)
    XalanElement *self
    char* name
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getAttribute(XalanDOMString(name));
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


XalanNodeList*
getElementsByTagName(self, localname)
    XalanElement *self
    char* localname
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::NodeList";
    CODE:
    try {
        RETVAL = self->getElementsByTagName(XalanDOMString(localname));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    if (!RETVAL) 
        XSRETURN_UNDEF;
    OUTPUT:
    RETVAL


char*
getAttributeNS(self, namespaceURI, localname)
    XalanElement *self
    char* namespaceURI
    char* localname
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getAttributeNS(XalanDOMString(namespaceURI), XalanDOMString(localname));
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


XalanNodeList*
getElementsByTagNameNS(self, namespaceURI, localname)
    XalanElement *self
    char* namespaceURI
    char* localname
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::NodeList";
    CODE:
    try {
        RETVAL = self->getElementsByTagNameNS(XalanDOMString(namespaceURI), XalanDOMString(localname));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanAttr*
setAttributeNode(self, newAttr)
    XalanElement *self
    XalanAttr* newAttr
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Attr";
    CODE:
    try {
        RETVAL = self->setAttributeNode(newAttr);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanAttr*
setAttributeNodeNS(self, newAttr)
    XalanElement *self
    XalanAttr* newAttr
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Attr";
    CODE:
    try {
        RETVAL = self->setAttributeNodeNS(newAttr);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanAttr*
removeAttributeNode(self, oldAttr)
    XalanElement *self
    XalanAttr* oldAttr
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Attr";
    CODE:
    try {
        RETVAL = self->removeAttributeNode(oldAttr);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

XalanAttr*
getAttributeNode(self, name)
    XalanElement *self
    char* name
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Attr";
    CODE:
    try {
        RETVAL = self->getAttributeNode(XalanDOMString(name));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


XalanAttr*
getAttributeNodeNS(self, namespaceURI, localname)
    XalanElement *self
    char* namespaceURI
    char* localname
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Attr";
    CODE:
    try {
        RETVAL = self->getAttributeNodeNS(XalanDOMString(namespaceURI), XalanDOMString(localname));
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL


char*
getTagName(self)
    XalanElement *self
    CODE:
    XalanDOMString tmpDOMString;
    try {
        tmpDOMString = self->getTagName();
    } catch (const XalanDOMException& e) {
        char *mesg;
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode());
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    DOMSTRING_2CHAR(RETVAL, tmpDOMString);
    OUTPUT:
    RETVAL


MODULE = XML::Xalan    PACKAGE = XML::Xalan::DOM::DOMImplementation
PROTOTYPES: DISABLE

XalanDocument*
createDocument(self, namespaceURI, qname, doctype)
    XalanDOMImplementation *self
    char *namespaceURI
    char *qname
    XalanDocumentType *doctype
    PREINIT:
    char *CLASS = "XML::Xalan::DOM::Document";
    CODE:
    try {
        RETVAL = self->createDocument(XalanDOMString(namespaceURI), XalanDOMString(qname), *doctype);
    } catch (const XalanDOMException& e) {
        char *mesg; 
        TRANSLATE_DOMEXCEPTION_CODE(mesg, e.getExceptionCode())
        croak("XalanDOMException caught: %s.\n", mesg);
    }
    OUTPUT:
    RETVAL

