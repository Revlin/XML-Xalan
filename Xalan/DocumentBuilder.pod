=head1 NAME

XML::Xalan::DocumentBuilder - Provides Perl SAX2 handlers

=head1 SYNOPSIS

  use XML::Xalan;
  ...
  
  my $doc_builder = $tr->create_document_builder();
  my $parser = AnySAX2Parser->new(
      Handler => $doc_builder->get_content_handler()
  );
  
  # fires SAX2 events..
  $parser->parse_file($file);

  # then transform the document builder object..
  $tr->transform_to_file($doc_builder, $xsl, $output);

=head1 DESCRIPTION

This class provides Perl SAX2 handlers, so an C<XML::Xalan::Transformer> object can transform
input source parsed by B<any Perl SAX 2.0 conformant parser>.

Currently supported handlers are content handler, dtd handler, and lexical
handler. 

=head1 METHODS

=over 4

=item $doc_builder->get_content_handler()

Returns an C<XML::Xalan::ContentHandler> object.

=item $doc_builder->get_dtd_handler()

Returns an C<XML::Xalan::DTDHandler> object.

=item $doc_builder->get_lexical_handler()

Returns an C<XML::Xalan::LexicalHandler> object.

=back

=head1 ON OBJECT REUSABILITY

C<XML::Xalan::DocumentBuilder> object is only reusable with the B<same input
source>. This means the following snippet won't work:

 # reuse the document builder with different input sources:
 for (1..100) {
     $p->parse_uri("$_.xml");
     my $res = $tr->transform_to_file($db, "foo.xsl", "$_.out");
 }

This is not a bug, as it is imposed by the underlying C++ implementation. 

Thus, for different input sources, you should recreate the document builder and parser object for each of them:

 for (1..100) {
     my $db = $tr->create_document_builder();
     my $p = XML::SAX::PurePerl->new(
         Handler => $db->get_content_handler();
     );

     $p->parse_uri("$_.xml");
     my $res = $tr->transform_to_file($db, "foo.xsl", "$_.out");
     $tr->destroy_document_builder($db);
 }

=head1 AUTHOR

Edwin Pratomo, edpratomo@cpan.org

=head1 SEE ALSO

C<XML::Xalan::Transformer>(3).

=cut
